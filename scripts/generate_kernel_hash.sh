# Copyright 2025 arancormonk
# SPDX-License-Identifier: MIT

#!/bin/bash
# Generate kernel hash for secure boot verification

set -e

KERNEL_ELF="zig-out/bin/kernel.elf"
HASH_FILE="zig-out/kernel.sha256"
HASH_ZIG="bootloader/uefi/src/security/kernel_hash.zig"

# Ensure zig-out directory exists
mkdir -p "zig-out"

# Check if kernel exists
if [ ! -f "$KERNEL_ELF" ]; then
    echo "Error: Kernel ELF not found at $KERNEL_ELF"
    echo "Please build the kernel first with 'zig build kernel'"
    exit 1
fi

# Calculate SHA-256 hash
echo "Calculating SHA-256 hash of kernel..."
HASH=$(sha256sum "$KERNEL_ELF" | cut -d' ' -f1)
echo "Kernel SHA-256: $HASH"

# Save hash to file
echo "$HASH" > "$HASH_FILE"

# Generate Zig source file with the hash
cat > "$HASH_ZIG" << EOF
// Auto-generated file - DO NOT EDIT
// Generated by scripts/generate-kernel-hash.sh
// Kernel hash for secure boot verification

const boot_protocol = @import("shared");

// Expected kernel hash (SHA-256)
pub const KERNEL_HASH = [boot_protocol.SHA256_SIZE]u8{
EOF

# Convert hex string to Zig array format
for ((i=0; i<${#HASH}; i+=2)); do
    byte="${HASH:$i:2}"
    if [ $i -eq 0 ]; then
        echo -n "    0x$byte" >> "$HASH_ZIG"
    elif [ $((($i/2) % 8)) -eq 0 ]; then
        echo "," >> "$HASH_ZIG"
        echo -n "    0x$byte" >> "$HASH_ZIG"
    else
        echo -n ", 0x$byte" >> "$HASH_ZIG"
    fi
done

cat >> "$HASH_ZIG" << EOF

};
EOF

echo "Generated $HASH_ZIG with kernel hash"
echo ""
echo "To enable hash verification:"
echo "1. Set EXPECTED_KERNEL_HASH in bootloader/uefi/src/security/verify.zig to use kernel_hash.KERNEL_HASH"
echo "2. Set ENFORCE_HASH_CHECK = true for production builds"
echo "3. Set ALLOW_UNSIGNED_KERNEL = false for production builds"