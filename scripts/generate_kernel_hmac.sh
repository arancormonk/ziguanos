# Copyright 2025 arancormonk
# SPDX-License-Identifier: MIT

#!/bin/bash
# Generate kernel HMAC placeholder for secure boot
# Actual HMAC verification now uses runtime-generated keys from UEFI variables

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
BUILD_DIR="$PROJECT_ROOT/zig-out"
KERNEL_ELF="$BUILD_DIR/bin/kernel.elf"
HMAC_ZIG="$PROJECT_ROOT/bootloader/uefi/src/security/kernel_hmac.zig"

# Ensure build directory exists
mkdir -p "$BUILD_DIR"

# Check if kernel exists
if [ ! -f "$KERNEL_ELF" ]; then
    echo "Error: Kernel ELF not found at $KERNEL_ELF"
    echo "Please build the kernel first with 'zig build kernel'"
    exit 1
fi

echo "NOTE: Kernel HMAC verification now uses runtime-generated keys stored in UEFI variables"
echo "This ensures cryptographic keys are never exposed on disk"

# Generate placeholder Zig source file
cat > "$HMAC_ZIG" << 'EOF'
// Auto-generated file - DO NOT EDIT
// Generated by scripts/generate-kernel-hmac.sh
// Kernel HMAC placeholder - actual verification uses runtime keys

const hmac = @import("hmac.zig");

// HMAC verification is now performed at runtime using keys from UEFI variables
// This placeholder is kept for compatibility but is not used for actual verification
pub const KERNEL_HMAC = [hmac.HMAC_SIZE]u8{0} ** hmac.HMAC_SIZE;

// Flag to indicate runtime HMAC verification should be used
pub const USE_RUNTIME_HMAC = true;

// The bootloader will:
// 1. Load or generate HMAC key from secure UEFI variables
// 2. Calculate kernel HMAC at runtime
// 3. Store the expected HMAC in UEFI variables on first boot
// 4. Verify kernel integrity on subsequent boots
EOF

echo "Generated $HMAC_ZIG with runtime HMAC placeholder"
echo ""
echo "Security Notes:"
echo "- HMAC keys are generated using hardware RNG at runtime"
echo "- Keys are stored in UEFI authenticated variables"
echo "- No cryptographic keys are stored on disk"
echo "- Kernel integrity is verified on every boot"